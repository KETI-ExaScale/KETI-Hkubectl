/*
Copyright Â© 2022 NAME HERE <EMAIL ADDRESS>

*/
package cmd

import (
	"context"
	"fmt"
	userpb "hkubectl/protos"
	"io/ioutil"
	"log"
	"time"

	"github.com/spf13/cobra"
	"google.golang.org/grpc"
)

// createCmd represents the create command
var createCmd = &cobra.Command{
	Use:   "create",
	Short: "A brief description of your command",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		//fmt.Println("create called")
		if len(args) < 1 {
			cobra.CheckErr(fmt.Errorf("add needs a name for the yaml file"))
		}
		data, err := ioutil.ReadFile(args[0])
		if err != nil {
			fmt.Println("read file error", err)
		}
		// postdata(data)
		grpcpostdata(data)
	},
}

func init() {
	rootCmd.AddCommand(createCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// createCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// createCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}

func grpcpostdata(data []byte) {
	conn, err := grpc.Dial("10.0.5.24:30036", grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := userpb.NewUserClient(conn)

	// yamldata = json.Marshal(data)
	// Contact the server and print out its response.
	//name := "gpu"
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	// var output appsv1.Deployment
	//var output type1.AutoGenerated
	// err = json.Unmarshal(data, &output)
	// if err != nil {
	// 	fmt.Println("unmarshal error", err)
	// }
	// fmt.Println(string(data))
	// fmt.Println(output)
	// output, err := yaml.YAMLToJSON(data)
	// if err != nil {
	// 	fmt.Println("error yamltojson", err)
	// }
	// fmt.Println(string(output))

	_, err = c.PostPod(ctx, &userpb.PostPodRequest{YamlData: string(data)})
	if err != nil {
		log.Fatalf("could not greet: %v", err)
	}
	fmt.Printf("Create New Work\n")
	//time.Sleep(1 * time.Second)
	cancel()
}
